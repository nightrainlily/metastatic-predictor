{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73478,"databundleVersionId":8121780,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import accuracy_score, mean_squared_error, r2_score\nimport seaborn as sns\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-04T19:42:54.682913Z","iopub.status.idle":"2024-06-04T19:42:58.011488Z","shell.execute_reply.started":"2024-06-04T19:42:54.683342Z","shell.execute_reply":"2024-06-04T19:42:58.010086Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/widsdatathon2024-challenge2/train.csv')\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:42:58.013877Z","iopub.execute_input":"2024-06-04T19:42:58.015144Z","iopub.status.idle":"2024-06-04T19:42:58.535759Z","shell.execute_reply.started":"2024-06-04T19:42:58.015103Z","shell.execute_reply":"2024-06-04T19:42:58.534582Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = pd.read_csv('/kaggle/input/widsdatathon2024-challenge2/test.csv')\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:42:58.537268Z","iopub.execute_input":"2024-06-04T19:42:58.537616Z","iopub.status.idle":"2024-06-04T19:42:58.770971Z","shell.execute_reply.started":"2024-06-04T19:42:58.537585Z","shell.execute_reply":"2024-06-04T19:42:58.769909Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Testing Single Marker Predictors","metadata":{}},{"cell_type":"code","source":"def single_marker(df, marker, title):\n    grouped = df.groupby([marker], as_index=False).mean()\n    x = grouped[marker]\n    y = grouped['metastatic_diagnosis_period']\n    sns.barplot(x=x, y=y)\n    plt.xticks(rotation=90, fontsize=7)\n#     plt.xlabel(marker, fontsize=5)\n    plt.ylabel('Average Per Marker Bin')\n    plt.title(title)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:42:58.773424Z","iopub.execute_input":"2024-06-04T19:42:58.773800Z","iopub.status.idle":"2024-06-04T19:42:58.781087Z","shell.execute_reply.started":"2024-06-04T19:42:58.773769Z","shell.execute_reply":"2024-06-04T19:42:58.779516Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"race = train[['patient_race', 'metastatic_diagnosis_period']]\nsingle_marker(race, 'patient_race', 'Average MDP by Patient')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:19.344150Z","iopub.execute_input":"2024-06-04T19:44:19.344641Z","iopub.status.idle":"2024-06-04T19:44:19.638278Z","shell.execute_reply.started":"2024-06-04T19:44:19.344603Z","shell.execute_reply":"2024-06-04T19:44:19.636811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"payer = train[['payer_type', 'metastatic_diagnosis_period']]\nsingle_marker(payer, 'payer_type', 'Average MDP by Patient')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:20.634702Z","iopub.execute_input":"2024-06-04T19:44:20.635126Z","iopub.status.idle":"2024-06-04T19:44:20.876196Z","shell.execute_reply.started":"2024-06-04T19:44:20.635086Z","shell.execute_reply":"2024-06-04T19:44:20.875057Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"age = train[['patient_age', 'metastatic_diagnosis_period']]\nage['age_bin'] = pd.cut(age['patient_age'], 10)\nsingle_marker(age, 'age_bin', 'Average MDP by Patient')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:21.018544Z","iopub.execute_input":"2024-06-04T19:44:21.019509Z","iopub.status.idle":"2024-06-04T19:44:21.329113Z","shell.execute_reply.started":"2024-06-04T19:44:21.019469Z","shell.execute_reply":"2024-06-04T19:44:21.327784Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"bmi = train[['bmi', 'metastatic_diagnosis_period']]\nbmi['bmi_bin'] = pd.cut(bmi['bmi'], 5)\nsingle_marker(bmi, 'bmi_bin', 'Average MDP by Patient')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:21.565960Z","iopub.execute_input":"2024-06-04T19:44:21.566964Z","iopub.status.idle":"2024-06-04T19:44:21.821620Z","shell.execute_reply.started":"2024-06-04T19:44:21.566925Z","shell.execute_reply":"2024-06-04T19:44:21.820241Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"state = train[['patient_state', 'metastatic_diagnosis_period']]\nstate_graph = single_marker(state, 'patient_state', 'Average MDP by Patient')\nstate_graph","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:25.614439Z","iopub.execute_input":"2024-06-04T19:44:25.615000Z","iopub.status.idle":"2024-06-04T19:44:26.176177Z","shell.execute_reply.started":"2024-06-04T19:44:25.614939Z","shell.execute_reply":"2024-06-04T19:44:26.175061Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"print(list(train.columns))","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:26.505869Z","iopub.execute_input":"2024-06-04T19:44:26.507118Z","iopub.status.idle":"2024-06-04T19:44:26.513845Z","shell.execute_reply.started":"2024-06-04T19:44:26.507074Z","shell.execute_reply":"2024-06-04T19:44:26.512340Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def filter_df(df):\n    climate = df.filter(like='Average of')\n    df_demo = df[df.columns.drop(list(df.filter(like='Average of')))]\n\n    df_demo = df_demo.dropna(subset=['family_size'])\n\n    values = {'patient_race': 'Unknown', 'payer_type': 'Other', 'bmi': 'Unknown', \"D\": 3}\n    df_demo = df_demo.fillna(value=values)\n    df_demo = df_demo.drop(['metastatic_first_novel_treatment', 'metastatic_first_novel_treatment_type', 'breast_cancer_diagnosis_desc'], axis=1)\n    df_demo = df_demo.set_index('patient_id')\n    \n    for col in ['patient_race', 'payer_type', 'patient_state', 'Region', 'Division', 'patient_gender', 'bmi', 'breast_cancer_diagnosis_code', 'metastatic_cancer_diagnosis_code']:\n        df_demo[col] = df_demo[col].astype('category')\n        df_demo[col] = df_demo[col].cat.codes\n    \n    return df_demo","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:29.008850Z","iopub.execute_input":"2024-06-04T19:44:29.009390Z","iopub.status.idle":"2024-06-04T19:44:29.017448Z","shell.execute_reply.started":"2024-06-04T19:44:29.009353Z","shell.execute_reply":"2024-06-04T19:44:29.016129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_e = filter_df(train)\ntrain_e.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:31.695288Z","iopub.execute_input":"2024-06-04T19:44:31.695725Z","iopub.status.idle":"2024-06-04T19:44:31.787391Z","shell.execute_reply.started":"2024-06-04T19:44:31.695692Z","shell.execute_reply":"2024-06-04T19:44:31.786088Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Random Forest","metadata":{}},{"cell_type":"markdown","source":"I chose a decision forest for this task because it is supervised (target variable) and quick to train.","metadata":{}},{"cell_type":"code","source":"x = train_e.drop('metastatic_diagnosis_period', axis=1)\ny = train_e['metastatic_diagnosis_period']","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:37.217211Z","iopub.execute_input":"2024-06-04T19:44:37.217653Z","iopub.status.idle":"2024-06-04T19:44:37.227861Z","shell.execute_reply.started":"2024-06-04T19:44:37.217620Z","shell.execute_reply":"2024-06-04T19:44:37.226684Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf = RandomForestRegressor(n_estimators=10, random_state=0, oob_score=True)\nrf.fit(x, y)","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:37.494336Z","iopub.execute_input":"2024-06-04T19:44:37.494778Z","iopub.status.idle":"2024-06-04T19:44:43.857672Z","shell.execute_reply.started":"2024-06-04T19:44:37.494744Z","shell.execute_reply":"2024-06-04T19:44:43.856463Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"predictions = rf.predict(x)\nmse = mean_squared_error(y, predictions)\nprint(f'Mean Squared Error: {mse}')\n \nr2 = r2_score(y, predictions)\nprint(f'R-squared: {r2}')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:43.859934Z","iopub.execute_input":"2024-06-04T19:44:43.860493Z","iopub.status.idle":"2024-06-04T19:44:43.932635Z","shell.execute_reply.started":"2024-06-04T19:44:43.860451Z","shell.execute_reply":"2024-06-04T19:44:43.931219Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Conclusions","metadata":{}},{"cell_type":"code","source":"def plot_importance(model, X):\n    fi = dict(zip(X.columns, model.feature_importances_))\n    feature_importances = pd.DataFrame(fi.items(), columns=['feature', 'importance']).sort_values('importance', ascending=False)\n    feature_importances = feature_importances[feature_importances['importance']>.02]\n    fig, ax = plt.subplots()\n    ax = sns.barplot(data=feature_importances, x='feature', y='importance')\n    plt.xticks(rotation=30, fontsize=6, horizontalalignment='right')\n    ax.bar_label(ax.containers[0])\n    plt.show()\n\nplot_importance(rf, x)","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:44:53.186398Z","iopub.execute_input":"2024-06-04T19:44:53.186786Z","iopub.status.idle":"2024-06-04T19:44:53.603686Z","shell.execute_reply.started":"2024-06-04T19:44:53.186756Z","shell.execute_reply":"2024-06-04T19:44:53.602284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The type of breast cancer that a patient is initially diagnosed with esems to have by far the highest impact, followed by their age.","metadata":{}},{"cell_type":"markdown","source":"## Output","metadata":{}},{"cell_type":"code","source":"test_ = filter_df(test)\ntest_.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:47:08.021798Z","iopub.execute_input":"2024-06-04T19:47:08.022277Z","iopub.status.idle":"2024-06-04T19:47:08.086855Z","shell.execute_reply.started":"2024-06-04T19:47:08.022241Z","shell.execute_reply":"2024-06-04T19:47:08.085472Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"output_df = pd.DataFrame({\n    'patient_id': test_.index,\n    'metastatic_diagnosis_period': rf.predict(test_)\n}\n)\n\noutput_df.to_csv('predictions.csv', index=False)\nprint('predictions saved')","metadata":{"execution":{"iopub.status.busy":"2024-06-04T19:48:09.087735Z","iopub.execute_input":"2024-06-04T19:48:09.088146Z","iopub.status.idle":"2024-06-04T19:48:09.130748Z","shell.execute_reply.started":"2024-06-04T19:48:09.088114Z","shell.execute_reply":"2024-06-04T19:48:09.129363Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}